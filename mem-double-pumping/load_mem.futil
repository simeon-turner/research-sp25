// A test case for 4-port memory and equivalents using two 2x2 matrix mutltiplier processing elements


import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "static-multiplier/static_multiplier.futil";
import "mem-4-port/seq_mem_4port.futil";



component main() -> () {

  //===========================================================================================
  //===========================================================================================
  //                                   HARDWARE CELLS
  //===========================================================================================
  //===========================================================================================

  cells {
    //===========================================================================================
    // GENERAL HARDWARE
    //===========================================================================================

    @external(1) INPUT_MEM = seq_mem_d1(32, 32, 5);
    @external(1) OUTPUT_MEM = seq_mem_d1(32, 32, 5);

    MAIN_MEM = seq_mem_4port(32, 32, 5);

    // constants with  bit width 32
    const0_32 = std_const(32, 0);

    // constants with bit width 5
    const0_5 = std_const(5, 0);
    const1_5 = std_const(5, 1);

    // hardware for memory loading and unloading
    load_addr = std_reg(5);
    add_laddr = std_add(5);

    //===========================================================================================
    // MATRIX MULT PE 1
    //===========================================================================================

    // registers to store values
    A0_tmp_1 = std_reg(32);
    B0_tmp_1 = std_reg(32);
    C0_tmp_1 = std_reg(32);

    // for calculating the partial sum
    add32_1 = std_add(32);
    mult32_1 = iterative_multiplier();

    // for calculating the address
    add0_1 = std_add(5);
    l_shiftA_1 = std_lsh(5); // left << right
    addA_1 = std_add(5);
    l_shiftB_1 = std_lsh(5); // left << right
    addB_1 = std_add(5);
    l_shiftC_1 = std_lsh(5); // left << right
    addC_1 = std_add(5);
    add_offA_1 = std_add(5);
    add_offB_1 = std_add(5);
    add_offC_1 = std_add(5);

    // to keep track of memory index
    // i for row of C0, j for column of C0, k for element being accumulated from A0 and B0
    i0_1 = std_reg(5);
    j0_1 = std_reg(5);
    k0_1 = std_reg(5);
    offA_1 = std_const(5, 0);
    offB_1 = std_const(5, 4);
    offC_1 = std_const(5, 8);

    //===========================================================================================
    // MATRIX MULT PE 2
    //===========================================================================================

    // registers to store values
    A0_tmp_2 = std_reg(32);
    B0_tmp_2 = std_reg(32);
    C0_tmp_2 = std_reg(32);

    // for calculating the partial sum
    add32_2 = std_add(32);
    mult32_2 = iterative_multiplier();

    // for calculating the address
    add0_2 = std_add(2);
    l_shiftA_2 = std_lsh(2); // left << right
    addA_2 = std_add(2);
    l_shiftB_2 = std_lsh(2); // left << right
    addB_2 = std_add(2);
    l_shiftC_2 = std_lsh(2); // left << right
    addC_2 = std_add(2);

    // to keep track of memory index
    // i for row of C0, j for column of C0, k for element being accumulated from A0 and B0
    i0_2 = std_reg(2);
    j0_2 = std_reg(2);
    k0_2 = std_reg(2);
  }

  //===========================================================================================
  //===========================================================================================
  //                                    WIRE GROUPS
  //===========================================================================================
  //===========================================================================================

  wires {
    //===========================================================================================
    // WIRE GROUPS FOR LOADING AND UNLOADING MEMORY
    //===========================================================================================

    static<1> group init_l {
      load_addr.write_en = 1'd1;
      load_addr.in = const0_5.out;
    }
    static<1> group incr_l {
      load_addr.write_en = 1'd1;
      add_laddr.left = load_addr.out;
      add_laddr.right = const1_5.out;
      load_addr.in = add_laddr.out;
    }
    // static<1> group write_main_mem_set {
    //   INPUT_MEM.addr0 = load_addr.out;
    //   INPUT_MEM.content_en = 1'd1;
    // }
    // static<5> group write_main_mem_w {
    //   MAIN_MEM.port0_addr = load_addr.out;
    //   MAIN_MEM.port0_we = 1'd1;
    //   MAIN_MEM.port0_en = 1'd1;

    //   MAIN_MEM.port0_write_data = INPUT_MEM.read_data;
    // }
    static<5> group write_main_mem {
      INPUT_MEM.addr0 = load_addr.out;
      INPUT_MEM.content_en = 1'd1;

      MAIN_MEM.port0_addr = load_addr.out;
      MAIN_MEM.port0_we = INPUT_MEM.done;
      MAIN_MEM.port0_en = INPUT_MEM.done;

      MAIN_MEM.port0_write_data = INPUT_MEM.read_data;
    }
    static<5> group read_main_mem_r {
      MAIN_MEM.port0_addr = load_addr.out;
      MAIN_MEM.port0_en = 1'd1;
    }
    static<1> group read_main_mem_w {
      OUTPUT_MEM.addr0 = load_addr.out;
      OUTPUT_MEM.write_en = 1'd1;
      OUTPUT_MEM.content_en = 1'd1;

      OUTPUT_MEM.write_data = MAIN_MEM.port0_read_data;
    }
  }

  //===========================================================================================
  //===========================================================================================
  //                                   CONTROL LOGIC
  //===========================================================================================
  //===========================================================================================

  control {
    static seq {
      //===========================================================================================
      // LOAD LOGIC
      //===========================================================================================

      init_l;

      static repeat 32 {
        static seq {
          write_main_mem;
          incr_l;
        } // end static seq
      } // end static repeat

      //===========================================================================================
      // UNLOAD LOGIC
      //===========================================================================================

      init_l;

      static repeat 32 {
        static seq {
          read_main_mem_r;
          read_main_mem_w;
          incr_l;
        } // end static seq
      } // end static repeat
    } // end static seq
  } // end control
}